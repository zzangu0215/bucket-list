{"version":3,"sources":["components/BucketForm.js","components/Bucket.js","components/BucketList.js","App.js","index.js"],"names":["BucketForm","props","useState","edit","value","input","setInput","eagerness","setEagerness","handleSubmit","e","preventDefault","item","id","Math","random","floor","Date","now","text","onSubmit","handleChange","target","className","type","placeholder","name","onChange","onClick","Bucket","setEdit","console","log","bucket","editBucketItem","map","isComplete","completeBucketItem","removeBucketItem","BucketList","setBucket","prevBucket","filter","itemId","newValue","prev","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61bd4947.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction BucketForm(props) {\n  const [input, setInput] = useState(props.edit?.value || \"\");\n  const [eagerness, setEagerness] = useState(props.edit?.eagerness || \"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const item = {};\n    item.id = props.edit?.id || Math.random(Math.floor() * 1000) + Date.now();\n    item.text = input;\n    item.eagerness = eagerness || \"low\";\n\n    props.onSubmit(item);\n    setInput(\"\");\n    setEagerness(\"\");\n  };\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  // First we check to see if \"edit\" prop exists. If not, we render the normal form\n  // If the prop \"edit\" exists, we know to render the update form instead\n  return !props.edit ? (\n    <div>\n      <form className=\"bucket-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Add to your bucket list\"\n          value={input}\n          name=\"text\"\n          className=\"bucket-input\"\n          onChange={handleChange}\n        ></input>\n        <div className=\"dropdown\">\n          <button className={`dropbtn ${eagerness}`}>\n            {eagerness || \"Priority\"}\n          </button>\n          <div className=\"dropdown-content\">\n            {/* TODO: Add an onClick events that will set the corresponding eagerness level to \"low\", \"medium\", or \"high\" */}\n            <p onClick={() => setEagerness(\"high\")}>Must do</p>\n            <p onClick={() => setEagerness(\"medium\")}>Want to do</p>\n            <p onClick={() => setEagerness(\"low\")}>Take it or leave it</p>\n          </div>\n        </div>\n        <button className=\"bucket-button\">Add bucket list item</button>\n      </form>\n    </div>\n  ) : (\n    <div>\n      <h3>Update entry: {props.edit.value}</h3>\n      <form className=\"bucket-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder={props.edit.value}\n          value={input}\n          name=\"text\"\n          className=\"bucket-input\"\n          onChange={handleChange}\n        ></input>\n        <div className=\"dropdown\">\n          <button className={`dropbtn ${eagerness}`}>\n            {eagerness || \"Priority\"}\n          </button>\n          <div className=\"dropdown-content\">\n            {/* TODO: Add an onClick events that will set the corresponding eagerness level to \"low\", \"medium\", or \"high\" */}\n            <p onClick={() => setEagerness(\"high\")}>Must do</p>\n            <p onClick={() => setEagerness(\"medium\")}>Want to do</p>\n            <p onClick={() => setEagerness(\"low\")}>Take it or leave it</p>\n          </div>\n        </div>\n        <button className=\"bucket-button\">Update</button>\n      </form>\n    </div>\n  );\n}\n\nexport default BucketForm;\n","import React, { useState } from \"react\";\nimport BucketForm from \"./BucketForm\";\n\nfunction Bucket(props) {\n  const [edit, setEdit] = useState({\n    id: null,\n    value: \"\",\n    eagerness: \"\",\n  });\n\n  console.log(props.bucket);\n\n  const submitUpdate = (value) => {\n    // TODO: Call the editBucketItem function from props to update the edited item in BucketList's state\n    // TODO: Set the key:value pairs in the `edit` object back to empty strings to reset the update form\n    props.editBucketItem(edit.id, value);\n    setEdit({ id: null, value: \"\", eagerness: \"\" });\n  };\n\n  // If the user is attempting to edit an item, render the bucket form with the edit variable passed as a prop\n  if (edit.id) {\n    return <BucketForm edit={edit} onSubmit={submitUpdate} />;\n  }\n\n  return props.bucket.map((item) => (\n    // - TODO: Add a className of `bucket-row complete ${item.eagerness}` for\n    //   completed items, and `bucket-row ${item.eagerness}` for non-completed\n    //   items. Hint: use a ternary operator\n    // - TODO: Add a key prop set to the value of the item id\n    <div\n      className={\n        item.isComplete\n          ? `bucket-row complete ${item.eagerness}`\n          : `bucket-row ${item.eagerness}`\n      }\n      key={item.id}\n    >\n      {/* TODO: Add an onClick event that invokes the `completeBucketItem` method\n      passing the item id as a argument */}\n      <div\n        onClick={() => {\n          props.completeBucketItem(item.id);\n        }}\n      >\n        {item.text}\n      </div>\n      <div className=\"icons\">\n        {/* TODO: Add an onClick event update the `edit` object with the `id`,\n        `value`, and `eagerness` properties */}\n        <p\n          onClick={() =>\n            setEdit({\n              id: item.id,\n              value: item.text,\n              eagerness: item.eagerness,\n            })\n          }\n        >\n          {\" \"}\n          ‚úèÔ∏è\n        </p>\n        {/* TODO: Add an onClick event that will invoke the removeBucketItem method passing in the `item.id` */}\n        <p\n          onClick={() => {\n            props.removeBucketItem(item.id);\n          }}\n        >\n          {\" \"}\n          üóëÔ∏è\n        </p>\n      </div>\n    </div>\n  ));\n}\n\nexport default Bucket;\n","import React, { useState } from \"react\";\nimport BucketForm from \"./BucketForm\";\nimport Bucket from \"./Bucket\";\n\nfunction BucketList() {\n  const [bucket, setBucket] = useState([]);\n\n  // Function to add a bucket list item\n  const addBucketItem = (item) => {\n    setBucket((prevBucket) => {\n      // TODO: Write logic to add the new bucket item to the prevBucket variable\n\n      return [...prevBucket, item];\n    });\n  };\n\n  // Function to mark bucket list item as complete\n  const completeBucketItem = (id) => {\n    // If the ID passed to this function matches the ID of the item that was clicked, mark it as complete\n\n    setBucket((prevBucket) =>\n      prevBucket.map((item) => {\n        // TODO: Write logic that marks an item as complete or incomplete when invoked\n        if (item.id === id) {\n          console.log(!item.isComplete);\n          item.isComplete = true;\n        }\n        return item;\n      })\n    );\n  };\n\n  // Function to remove bucket list item and update state\n  const removeBucketItem = (id) => {\n    setBucket((prevBucket) => {\n      // TODO: Write logic that will return an array of items that don't contain the ID passed to this function\n      prevBucket = bucket.filter((item) => item.id !== id);\n\n      return prevBucket;\n    });\n  };\n\n  // Function to edit the bucket list item\n  const editBucketItem = (itemId, newValue) => {\n    // Make sure that the value isn't empty\n    if (!newValue.text) {\n      return;\n    }\n\n    // We use the \"prev\" argument provided with the useState hook to map through our list of items\n    // We then check to see if the item ID matches the id of the item that was clicked and if so, we set it to a new value\n    setBucket((prev) =>\n      prev.map((item) => (item.id === itemId ? newValue : item))\n    );\n  };\n\n  return (\n    <div>\n      <h1>What is on your bucket list?</h1>\n      <BucketForm onSubmit={addBucketItem} />\n      <Bucket\n        bucket={bucket}\n        completeBucketItem={completeBucketItem}\n        removeBucketItem={removeBucketItem}\n        editBucketItem={editBucketItem}\n      ></Bucket>\n    </div>\n  );\n}\n\nexport default BucketList;\n","import \"./App.css\";\nimport BucketList from \"./components/BucketList\";\n\nfunction App() {\n  return (\n    <div className=\"bucket-app\">\n      <BucketList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}